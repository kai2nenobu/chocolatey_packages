name: Continuous Build

on:
  workflow_dispatch: # Enable manual trigger
    inputs:
      git_ref:
        description: Reference of git (like refs/heads/master or refs/tags/v1.0.0)
        required: true
  push:
    branches: 'package/*'
    tags: '*'

env:
  MINGW_ROOT: 'C:\MinGW'
  MSYS2_ROOT: 'C:\msys64'
  PYTHON27_ROOT: 'C:\hostedtoolcache\windows\Python\2.7.18\x64'

jobs:
  build:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Check a build environment
        run: |
          Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version
          $PSVersionTable
          git --version
          choco --version
          env | grep -i 'github\|runner' | sort
          '${{ toJson(github) }}'
      - name: Detect a target package # from a tag name or a branch name
        run: |
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch') {
            # Overwrite GITHUB_REF with a trigger input
            $env:GITHUB_REF = '${{ github.event.inputs.git_ref }}'
          }
          ## Extract package id from ref
          $refs = $env:GITHUB_REF -split '/'
          if ($refs[1] -eq 'tags') {
            # Tag like "refs/tags/<package_id>/<package_version>"
            $packageId = $refs[2]
          } elseif (($refs[1] -eq 'heads') -and ($refs[2] -eq 'package')) {
            # Branch like "refs/heads/package/<package_id>"
            $packageId = $refs[3]
          } else {
            $message = 'Cannot extract a package id from ref "{0}"' -f $env:GITHUB_REF
            Write-Error -Message $message
            exit 1
          }
          if (-not (Test-Path -LiteralPath $packageId)) {
            $message = 'Directory for package "{0}" not found' -f $packageId
            Write-Error -Message $message
            exit 1
          }
          # Pass a package id to subsequent steps
          "::set-env name=PACKAGE_ID::$packageId"
      - name: Build (if build is required)
        run: |
          cd $env:PACKAGE_ID
          if (Test-Path -LiteralPath build.bat) {
            .\build.bat
          } else {
            'Nothing to build'
          }
      - name: Package
        run: Write-Host "Packaging $env:PACKAGE_ID"
      - name: Publish
        run: Write-Host "Publishing $env:PACKAGE_ID"
